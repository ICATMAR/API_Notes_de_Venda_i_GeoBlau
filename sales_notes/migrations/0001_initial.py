# Generated by Django 5.1.2 on 2025-10-30 16:03

import django.contrib.gis.db.models.fields
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from decimal import Decimal
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="UnidadProductiva",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                (
                    "metodo_produccion",
                    models.IntegerField(
                        choices=[
                            (1, "Pesca extractiva marina"),
                            (2, "Aqüicultura marina"),
                            (3, "Pesca extractiva aigües interiors"),
                            (4, "Aqüicultura aigües interiors"),
                        ],
                        db_index=True,
                    ),
                ),
                (
                    "tipo_unidad",
                    models.CharField(
                        choices=[("BUQUE", "Vaixell"), ("GRANJA", "Granja"), ("PERSONA", "Persona Física/Jurídica")],
                        db_index=True,
                        max_length=20,
                    ),
                ),
            ],
            options={
                "verbose_name": "Unitat productiva",
                "verbose_name_plural": "Unitats productives",
                "db_table": "unidad_productiva",
                "ordering": ["created_at"],
            },
        ),
        migrations.CreateModel(
            name="EstablecimientoVenta",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                (
                    "num_identificacion_establec",
                    models.CharField(db_index=True, help_text="Número d'identificació de l'establiment", max_length=50),
                ),
            ],
            options={
                "verbose_name": "Establiment de venda",
                "verbose_name_plural": "Establiments de venda",
                "db_table": "establecimiento_venta",
                "ordering": ["num_identificacion_establec"],
            },
        ),
        migrations.CreateModel(
            name="Port",
            fields=[
                ("id", models.SmallIntegerField(db_column="Id", primary_key=True, serialize=False)),
                ("name", models.CharField(db_column="Name", max_length=50)),
                ("region", models.CharField(blank=True, db_column="Region", max_length=50, null=True)),
                ("area", models.CharField(blank=True, db_column="Area", max_length=50, null=True)),
                (
                    "latitude",
                    models.DecimalField(blank=True, db_column="Latitude", decimal_places=8, max_digits=15, null=True),
                ),
                (
                    "longitude",
                    models.DecimalField(blank=True, db_column="Longitude", decimal_places=8, max_digits=15, null=True),
                ),
                ("code", models.IntegerField(db_column="Code")),
                (
                    "geom",
                    django.contrib.gis.db.models.fields.GeometryField(
                        blank=True, db_column="geom", null=True, srid=4326
                    ),
                ),
                (
                    "autonomous_community",
                    models.CharField(blank=True, db_column="AutonomousCommunity", max_length=50, null=True),
                ),
                ("fishers_association", models.BooleanField(blank=True, db_column="FishersAssociation", null=True)),
                ("auction", models.BooleanField(blank=True, db_column="Auction", null=True)),
            ],
            options={
                "verbose_name": "Port",
                "verbose_name_plural": "Ports",
                "db_table": "port",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="Species",
            fields=[
                ("id", models.IntegerField(db_column="Id", primary_key=True, serialize=False)),
                ("code_3a", models.CharField(db_column="3A_Code", db_index=True, max_length=3, unique=True)),
                ("scientific_name", models.CharField(db_column="ScientificName", max_length=37)),
                ("catalan_name", models.CharField(blank=True, db_column="CatalanName", max_length=30, null=True)),
                ("spanish_name", models.CharField(blank=True, db_column="SpanishName", max_length=30, null=True)),
                ("english_name", models.CharField(blank=True, db_column="EnglishName", max_length=30, null=True)),
                ("group", models.CharField(blank=True, db_column="Group", max_length=50, null=True)),
                ("group2", models.CharField(blank=True, db_column="Group2", max_length=50, null=True)),
                ("french_name", models.CharField(blank=True, db_column="FrenchName", max_length=30, null=True)),
                (
                    "generalitat_name",
                    models.CharField(blank=True, db_column="GeneralitatName", max_length=100, null=True),
                ),
                ("species_class", models.CharField(blank=True, db_column="Class", max_length=30, null=True)),
                ("order", models.CharField(blank=True, db_column="Order", max_length=30, null=True)),
                ("family", models.CharField(blank=True, db_column="Family", max_length=30, null=True)),
                ("genus", models.CharField(blank=True, db_column="Genus", max_length=30, null=True)),
                (
                    "a_const",
                    models.DecimalField(blank=True, db_column="A_Const", decimal_places=4, max_digits=12, null=True),
                ),
                (
                    "b_const",
                    models.DecimalField(blank=True, db_column="B_Const", decimal_places=4, max_digits=12, null=True),
                ),
                (
                    "generalitat_code",
                    models.CharField(blank=True, db_column="GeneralitatCode", max_length=3, null=True),
                ),
                ("observations", models.TextField(blank=True, db_column="Observations", null=True)),
                (
                    "minimum_size",
                    models.DecimalField(
                        blank=True, db_column="MinimumSize", decimal_places=2, max_digits=12, null=True
                    ),
                ),
                (
                    "maximum_size",
                    models.DecimalField(
                        blank=True, db_column="MaximumSize", decimal_places=2, max_digits=12, null=True
                    ),
                ),
                ("number_of_sizes", models.IntegerField(blank=True, db_column="NumberOfSizes", null=True)),
                ("is_waste", models.BooleanField(blank=True, db_column="IsWaste", null=True)),
                ("waste_type", models.CharField(blank=True, db_column="WasteType", max_length=30, null=True)),
                ("phylum", models.CharField(blank=True, db_column="Phylum", max_length=30, null=True)),
                ("taxonomic_group", models.CharField(blank=True, db_column="TaxonomicGroup", max_length=30, null=True)),
                ("mcrs", models.DecimalField(blank=True, db_column="MCRS", decimal_places=2, max_digits=12, null=True)),
                ("aphia_id", models.IntegerField(blank=True, db_column="AphiaId", null=True)),
            ],
            options={
                "verbose_name": "Espècie",
                "verbose_name_plural": "Espècies",
                "db_table": "species",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="Vessel",
            fields=[
                ("id", models.IntegerField(db_column="Id", primary_key=True, serialize=False)),
                ("code", models.CharField(db_column="Code", db_index=True, max_length=12, unique=True)),
                ("event_code", models.CharField(blank=True, db_column="EventCode", max_length=3, null=True)),
                ("event_start_date", models.DateField(blank=True, db_column="EventStartDate", null=True)),
                ("event_end_date", models.DateField(blank=True, db_column="EventEndDate", null=True)),
                ("licence_ind", models.BooleanField(blank=True, db_column="LicenceInd", null=True)),
                (
                    "registration_num",
                    models.CharField(blank=True, db_column="RegistrationNum", max_length=15, null=True),
                ),
                ("name", models.CharField(blank=True, db_column="Name", max_length=50, null=True)),
                ("base_port_code", models.IntegerField(blank=True, db_column="BasePortCode", null=True)),
                ("base_port_name", models.CharField(blank=True, db_column="BasePortName", max_length=30, null=True)),
                ("ircs", models.CharField(blank=True, db_column="IRCS", max_length=10, null=True)),
                ("vms", models.BooleanField(blank=True, db_column="VMS", null=True)),
                ("gear_main_code", models.CharField(blank=True, db_column="GearMainCode", max_length=3, null=True)),
                ("gear_sec_code", models.CharField(blank=True, db_column="GearSecCode", max_length=3, null=True)),
                (
                    "loa_m",
                    models.DecimalField(blank=True, db_column="LOA_m", decimal_places=2, max_digits=10, null=True),
                ),
                (
                    "lbp_m",
                    models.DecimalField(blank=True, db_column="LBP_m", decimal_places=2, max_digits=10, null=True),
                ),
                ("gt", models.DecimalField(blank=True, db_column="GT", decimal_places=2, max_digits=10, null=True)),
                ("trb", models.DecimalField(blank=True, db_column="TRB", decimal_places=2, max_digits=10, null=True)),
                (
                    "power_main_kw",
                    models.DecimalField(
                        blank=True, db_column="PowerMain_kW", decimal_places=2, max_digits=10, null=True
                    ),
                ),
                (
                    "power_aux_kw",
                    models.DecimalField(
                        blank=True, db_column="PowerAux_kW", decimal_places=2, max_digits=10, null=True
                    ),
                ),
                ("hull_material", models.CharField(blank=True, db_column="HullMaterial", max_length=20, null=True)),
                ("service_starting_date", models.DateField(blank=True, db_column="ServiceStartingDate", null=True)),
                ("base_port_id", models.SmallIntegerField(blank=True, db_column="BasePortId", null=True)),
                ("ais", models.BooleanField(blank=True, db_column="AIS", null=True)),
            ],
            options={
                "verbose_name": "Vaixell",
                "verbose_name_plural": "Vaixells",
                "db_table": "vessel",
                "managed": True,
            },
        ),
        migrations.CreateModel(
            name="Granja",
            fields=[
                (
                    "unidad_productiva",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="granja",
                        serialize=False,
                        to="sales_notes.unidadproductiva",
                    ),
                ),
                ("codigo_rega", models.CharField(db_index=True, help_text="Codi REGA de la granja", max_length=14)),
                ("lugar_descarga", models.CharField(blank=True, help_text="Lloc de descàrrega", max_length=250)),
                ("fecha_produccion", models.DateTimeField(help_text="Data de producció")),
            ],
            options={
                "verbose_name": "Granja",
                "verbose_name_plural": "Granges",
                "db_table": "granja",
            },
        ),
        migrations.CreateModel(
            name="PersonaFisicaJuridica",
            fields=[
                (
                    "unidad_productiva",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="persona",
                        serialize=False,
                        to="sales_notes.unidadproductiva",
                    ),
                ),
                ("nif_persona", models.CharField(db_index=True, help_text="NIF/NIE/CIF de la persona", max_length=17)),
                ("lugar_descarga", models.CharField(blank=True, help_text="Lloc de descàrrega", max_length=250)),
                ("fecha_descarga", models.DateTimeField(help_text="Data de descàrrega")),
            ],
            options={
                "verbose_name": "Persona física/jurídica",
                "verbose_name_plural": "Persones físiques/jurídiques",
                "db_table": "persona_fisica_juridica",
            },
        ),
        migrations.CreateModel(
            name="Envio",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                (
                    "num_envio",
                    models.CharField(db_index=True, help_text="Número únic d'enviament", max_length=50, unique=True),
                ),
                (
                    "tipo_respuesta",
                    models.IntegerField(
                        choices=[(1, "Completa"), (2, "Media"), (3, "Reducida")],
                        default=1,
                        help_text="Tipus de resposta esperada del sistema",
                    ),
                ),
                ("fecha_recepcion", models.DateTimeField(db_index=True, default=django.utils.timezone.now)),
                ("procesado", models.BooleanField(db_index=True, default=False)),
                ("fecha_procesado", models.DateTimeField(blank=True, null=True)),
                ("validado", models.BooleanField(default=False)),
                ("errores", models.JSONField(blank=True, default=list)),
                ("ip_origen", models.GenericIPAddressField(blank=True, null=True)),
                (
                    "usuario_envio",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.PROTECT, related_name="envios", to=settings.AUTH_USER_MODEL
                    ),
                ),
            ],
            options={
                "verbose_name": "Enviament",
                "verbose_name_plural": "Enviaments",
                "db_table": "envio",
                "ordering": ["-fecha_recepcion"],
            },
        ),
        migrations.CreateModel(
            name="Especie",
            fields=[
                ("created_at", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                (
                    "num_doc_venta",
                    models.CharField(db_index=True, help_text="Número del document de venda", max_length=21),
                ),
                (
                    "especie_al3",
                    models.CharField(
                        db_index=True,
                        help_text="Codi FAO de l'espècie (3 lletres)",
                        max_length=3,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Codi AL3 invàlid (ha de ser 3 lletres)", regex="^[A-Za-z]{3}$"
                            )
                        ],
                    ),
                ),
                ("zona", models.CharField(blank=True, max_length=50)),
                ("zona_geografica", models.CharField(blank=True, max_length=50)),
                ("ccaa", models.IntegerField(blank=True, help_text="Codi Comunitat Autònoma", null=True)),
                (
                    "pais_al3",
                    models.CharField(
                        blank=True,
                        help_text="Codi ISO-3 del país",
                        max_length=3,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Codi AL3 invàlid (ha de ser 3 lletres)", regex="^[A-Za-z]{3}$"
                            )
                        ],
                    ),
                ),
                (
                    "masa_agua",
                    models.CharField(blank=True, help_text="Massa d'aigua on es va capturar", max_length=100),
                ),
                (
                    "arte_al3",
                    models.CharField(blank=True, db_index=True, help_text="Codi d'art de pesca (FAO)", max_length=3),
                ),
                (
                    "otro_arte",
                    models.CharField(
                        blank=True, help_text="Descripció d'altres arts no estandarditzats", max_length=100
                    ),
                ),
                (
                    "cod_especie_conservacion",
                    models.CharField(blank=True, help_text="Codi estat de conservació", max_length=3),
                ),
                (
                    "cod_especie_presentacion",
                    models.CharField(blank=True, help_text="Codi presentació del producte", max_length=5),
                ),
                ("presentacion_oth", models.CharField(blank=True, help_text="Altres presentacions", max_length=50)),
                ("id_presentacion_oth", models.IntegerField(blank=True, null=True)),
                ("cod_especie_frescura", models.CharField(blank=True, help_text="Codi frescura", max_length=2)),
                ("cod_especie_calibre", models.CharField(blank=True, help_text="Codi calibre", max_length=15)),
                ("fecha_venta", models.DateTimeField(db_index=True, help_text="Data i hora de venda")),
                ("lote", models.CharField(blank=True, help_text="Número de lot", max_length=50)),
                (
                    "cod_contrato_alim",
                    models.CharField(blank=True, help_text="Codi contracte alimentari", max_length=50),
                ),
                (
                    "num_doc_transporte",
                    models.CharField(blank=True, help_text="Número document de transport", max_length=50),
                ),
                (
                    "num_declaracion_recog",
                    models.CharField(blank=True, help_text="Número declaració recollida", max_length=21),
                ),
                ("certificado_de_origen", models.BooleanField(default=False, help_text="Té certificat d'origen")),
                (
                    "tipo_cif_nif_vendedor",
                    models.IntegerField(
                        choices=[(1, "NIF"), (2, "NIE"), (3, "Passaport"), (5, "Altres documents")],
                        help_text="Tipus document identificació venedor",
                    ),
                ),
                ("nif_vendedor", models.CharField(db_index=True, help_text="NIF/CIF del venedor", max_length=17)),
                ("nombre_vendedor", models.CharField(help_text="Nom del venedor", max_length=100)),
                ("direccion_vendedor", models.CharField(blank=True, help_text="Direcció del venedor", max_length=100)),
                ("nif_comprador", models.CharField(db_index=True, help_text="NIF/CIF del comprador", max_length=17)),
                (
                    "id_tipo_nif_cif_comprador",
                    models.IntegerField(
                        choices=[(1, "NIF"), (2, "NIE"), (3, "Passaport"), (5, "Altres documents")],
                        help_text="Tipus document identificació comprador",
                    ),
                ),
                (
                    "pais_comprador",
                    models.CharField(
                        blank=True,
                        help_text="Codi ISO-3 país del comprador",
                        max_length=3,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Codi país invàlid (ISO-3, 3 lletres)", regex="^[A-Za-z]{3}$"
                            )
                        ],
                    ),
                ),
                ("nombre_comprador", models.CharField(help_text="Nom del comprador", max_length=100)),
                (
                    "direccion_comprador",
                    models.CharField(blank=True, help_text="Direcció del comprador", max_length=100),
                ),
                (
                    "precio",
                    models.DecimalField(
                        decimal_places=2,
                        help_text="Preu total",
                        max_digits=12,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.00"))],
                    ),
                ),
                (
                    "cod_moneda",
                    models.CharField(
                        default="EUR",
                        help_text="Codi ISO-4217 moneda",
                        max_length=3,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Codi moneda invàlid (ISO-4217, 3 lletres)", regex="^[A-Za-z]{3}$"
                            )
                        ],
                    ),
                ),
                (
                    "cantidad",
                    models.DecimalField(
                        decimal_places=3,
                        help_text="Quantitat en kg",
                        max_digits=10,
                        validators=[django.core.validators.MinValueValidator(Decimal("0.001"))],
                    ),
                ),
                (
                    "num_ejemplares",
                    models.IntegerField(
                        blank=True,
                        help_text="Nombre d'exemplars",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                (
                    "num_cajas",
                    models.IntegerField(
                        blank=True,
                        help_text="Nombre de caixes",
                        null=True,
                        validators=[django.core.validators.MinValueValidator(0)],
                    ),
                ),
                ("es_talla_reglamentaria", models.BooleanField(default=True, help_text="És talla reglamentària")),
                (
                    "tipo_retirada",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "No s'ha retirat"),
                            (2, "Retirada per talla"),
                            (3, "Retirada per quota"),
                            (4, "Retirada sense preu"),
                            (5, "Retirada altre"),
                            (6, "Desembarcament per sota mínims"),
                        ],
                        help_text="Tipus de retirada",
                        null=True,
                    ),
                ),
                (
                    "cod_destino_retirado",
                    models.CharField(blank=True, help_text="Codi destí del producte retirat", max_length=50),
                ),
                (
                    "lugar_almacenamiento",
                    models.CharField(blank=True, help_text="Lloc d'emmagatzematge", max_length=100),
                ),
                ("observaciones", models.TextField(blank=True, help_text="Observacions addicionals")),
                (
                    "num_acta_inspeccion",
                    models.CharField(blank=True, help_text="Número d'acta d'inspecció", max_length=20),
                ),
                (
                    "unidad_productiva",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="especies",
                        to="sales_notes.unidadproductiva",
                    ),
                ),
                (
                    "species_ref",
                    models.ForeignKey(
                        blank=True,
                        help_text="Referència a l'espècie del catàleg",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ventas",
                        to="sales_notes.species",
                        to_field="code_3a",
                    ),
                ),
            ],
            options={
                "verbose_name": "Espècie",
                "verbose_name_plural": "Espècies",
                "db_table": "especie",
                "ordering": ["-fecha_venta"],
            },
        ),
        migrations.AddField(
            model_name="unidadproductiva",
            name="establecimiento",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name="unidades_productivas",
                to="sales_notes.establecimientoventa",
            ),
        ),
        migrations.AddField(
            model_name="establecimientoventa",
            name="envio",
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE, related_name="establecimientos", to="sales_notes.envio"
            ),
        ),
        migrations.CreateModel(
            name="FechaCaptura",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("fecha_captura_ini", models.DateTimeField(help_text="Data i hora inici captura")),
                (
                    "fecha_captura_fin",
                    models.DateTimeField(blank=True, help_text="Data i hora fi captura (opcional)", null=True),
                ),
                (
                    "especie",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="fechas_captura",
                        to="sales_notes.especie",
                    ),
                ),
            ],
            options={
                "verbose_name": "Data de captura",
                "verbose_name_plural": "Dates de captura",
                "db_table": "fecha_captura",
                "ordering": ["fecha_captura_ini"],
            },
        ),
        migrations.CreateModel(
            name="Buque",
            fields=[
                (
                    "unidad_productiva",
                    models.OneToOneField(
                        on_delete=django.db.models.deletion.CASCADE,
                        primary_key=True,
                        related_name="buque",
                        serialize=False,
                        to="sales_notes.unidadproductiva",
                    ),
                ),
                (
                    "codigo_buque",
                    models.CharField(db_index=True, help_text="Codi del vaixell (matrícula)", max_length=12),
                ),
                (
                    "puerto_al5",
                    models.CharField(
                        blank=True,
                        help_text="Codi del port en format AL5",
                        max_length=5,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Format invàlid. Ha de ser 2 lletres + 3 alfanumèrics (ex: ESBAR)",
                                regex="^[A-Za-z]{2}[A-Za-z0-9]{3}$",
                            )
                        ],
                    ),
                ),
                ("armador", models.CharField(blank=True, max_length=100)),
                ("capitan", models.CharField(blank=True, max_length=60)),
                ("fecha_regreso_puerto", models.DateTimeField(help_text="Data i hora de retorn al port")),
                ("cod_marea", models.CharField(blank=True, help_text="Codi de marea", max_length=50)),
                (
                    "port_ref",
                    models.ForeignKey(
                        blank=True,
                        help_text="Referència al port del catàleg",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ventas_puerto",
                        to="sales_notes.port",
                    ),
                ),
                (
                    "vessel_ref",
                    models.ForeignKey(
                        blank=True,
                        help_text="Referència al vaixell del catàleg",
                        null=True,
                        on_delete=django.db.models.deletion.PROTECT,
                        related_name="ventas_buque",
                        to="sales_notes.vessel",
                        to_field="code",
                    ),
                ),
            ],
            options={
                "verbose_name": "Vaixell",
                "verbose_name_plural": "Vaixells",
                "db_table": "buque",
            },
        ),
        migrations.AddIndex(
            model_name="envio",
            index=models.Index(fields=["num_envio", "fecha_recepcion"], name="envio_num_env_1bb15e_idx"),
        ),
        migrations.AddIndex(
            model_name="envio",
            index=models.Index(fields=["procesado", "validado"], name="envio_procesa_6808ba_idx"),
        ),
        migrations.AddIndex(
            model_name="unidadproductiva",
            index=models.Index(fields=["tipo_unidad", "metodo_produccion"], name="unidad_prod_tipo_un_f35eef_idx"),
        ),
        migrations.AlterUniqueTogether(
            name="establecimientoventa",
            unique_together={("envio", "num_identificacion_establec")},
        ),
        migrations.AddIndex(
            model_name="fechacaptura",
            index=models.Index(
                fields=["fecha_captura_ini", "fecha_captura_fin"], name="fecha_captu_fecha_c_77b9cf_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="especie",
            index=models.Index(fields=["especie_al3", "fecha_venta"], name="especie_especie_7b6b90_idx"),
        ),
        migrations.AddIndex(
            model_name="especie",
            index=models.Index(fields=["species_ref", "fecha_venta"], name="especie_species_bb8074_idx"),
        ),
        migrations.AddIndex(
            model_name="especie",
            index=models.Index(fields=["arte_al3", "zona"], name="especie_arte_al_ca1645_idx"),
        ),
        migrations.AddIndex(
            model_name="especie",
            index=models.Index(fields=["nif_vendedor", "fecha_venta"], name="especie_nif_ven_bace9e_idx"),
        ),
        migrations.AddIndex(
            model_name="especie",
            index=models.Index(fields=["nif_comprador", "fecha_venta"], name="especie_nif_com_78b55a_idx"),
        ),
        migrations.AddIndex(
            model_name="buque",
            index=models.Index(fields=["vessel_ref"], name="buque_vessel__358210_idx"),
        ),
        migrations.AddIndex(
            model_name="buque",
            index=models.Index(fields=["port_ref"], name="buque_port_re_75d223_idx"),
        ),
    ]
