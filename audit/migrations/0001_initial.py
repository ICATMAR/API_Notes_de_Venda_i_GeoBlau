# Generated by Django 5.1.2 on 2025-10-22 12:53

import django.db.models.deletion
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("authentication", "0001_initial"),
        ("contenttypes", "0002_remove_content_type_name"),
        ("sales_notes", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="AuditLog",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                (
                    "action",
                    models.CharField(
                        choices=[
                            ("CREATE", "Creació"),
                            ("UPDATE", "Actualització"),
                            ("DELETE", "Eliminació"),
                            ("READ", "Lectura"),
                            ("LOGIN", "Login"),
                            ("LOGOUT", "Logout"),
                            ("FAILED_LOGIN", "Intent login fallit"),
                            ("VALIDATION_ERROR", "Error de validació"),
                            ("SECURITY_EVENT", "Event de seguretat"),
                        ],
                        db_index=True,
                        max_length=20,
                    ),
                ),
                ("object_id", models.CharField(blank=True, max_length=255, null=True)),
                ("description", models.TextField(help_text="Descripció de l'acció")),
                (
                    "old_value",
                    models.JSONField(blank=True, help_text="Valor anterior (per actualitzacions)", null=True),
                ),
                (
                    "new_value",
                    models.JSONField(blank=True, help_text="Valor nou (per creacions i actualitzacions)", null=True),
                ),
                ("ip_address", models.GenericIPAddressField(blank=True, null=True)),
                ("user_agent", models.TextField(blank=True)),
                ("request_id", models.CharField(blank=True, db_index=True, max_length=50)),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("INFO", "Informació"),
                            ("WARNING", "Avís"),
                            ("ERROR", "Error"),
                            ("CRITICAL", "Crític"),
                        ],
                        db_index=True,
                        default="INFO",
                        max_length=10,
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "content_type",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.CASCADE,
                        to="contenttypes.contenttype",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="audit_logs",
                        to="authentication.apiuser",
                    ),
                ),
            ],
            options={
                "verbose_name": "Registre d'auditoria",
                "verbose_name_plural": "Registres d'auditoria",
                "db_table": "audit_log",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(fields=["action", "timestamp"], name="audit_log_action_09d227_idx"),
                    models.Index(fields=["user", "timestamp"], name="audit_log_user_id_835db7_idx"),
                    models.Index(fields=["severity", "timestamp"], name="audit_log_severit_917ad4_idx"),
                    models.Index(fields=["ip_address", "timestamp"], name="audit_log_ip_addr_f3d5f9_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="DataValidationError",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("field_name", models.CharField(db_index=True, help_text="Nom del camp amb error", max_length=100)),
                (
                    "error_type",
                    models.CharField(
                        db_index=True, help_text="Tipus d'error (ex: required, format, range)", max_length=50
                    ),
                ),
                ("error_message", models.TextField(help_text="Missatge d'error detallat")),
                ("invalid_value", models.TextField(blank=True, help_text="Valor que no va passar la validació")),
                ("expected_format", models.TextField(blank=True, help_text="Format esperat")),
                ("json_path", models.CharField(blank=True, help_text="Path JSON on es troba l'error", max_length=500)),
                ("resolved", models.BooleanField(default=False)),
                ("resolution_notes", models.TextField(blank=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "envio",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="validation_errors",
                        to="sales_notes.envio",
                    ),
                ),
            ],
            options={
                "verbose_name": "Error de validació",
                "verbose_name_plural": "Errors de validació",
                "db_table": "data_validation_error",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(fields=["field_name", "error_type"], name="data_valida_field_n_1d0294_idx"),
                    models.Index(fields=["resolved", "timestamp"], name="data_valida_resolve_a34aa9_idx"),
                ],
            },
        ),
        migrations.CreateModel(
            name="SecurityEvent",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("BRUTE_FORCE", "Intent de força bruta"),
                            ("SQL_INJECTION", "Intent d'injecció SQL"),
                            ("XSS_ATTEMPT", "Intent de XSS"),
                            ("INVALID_TOKEN", "Token invàlid"),
                            ("RATE_LIMIT_EXCEEDED", "Límit de peticions excedit"),
                            ("UNAUTHORIZED_ACCESS", "Accés no autoritzat"),
                            ("SUSPICIOUS_ACTIVITY", "Activitat sospitosa"),
                            ("DATA_BREACH_ATTEMPT", "Intent de filtrament de dades"),
                            ("MALFORMED_REQUEST", "Petició mal formada"),
                        ],
                        db_index=True,
                        max_length=30,
                    ),
                ),
                ("ip_address", models.GenericIPAddressField(db_index=True)),
                ("user_agent", models.TextField(blank=True)),
                ("description", models.TextField()),
                ("request_path", models.CharField(max_length=500)),
                ("request_method", models.CharField(max_length=10)),
                ("request_data_hash", models.CharField(blank=True, max_length=64)),
                ("blocked", models.BooleanField(default=False, help_text="Si l'acció va ser bloquejada")),
                ("action_taken", models.TextField(blank=True, help_text="Acció que va prendre el sistema")),
                (
                    "severity",
                    models.CharField(
                        choices=[("LOW", "Baixa"), ("MEDIUM", "Mitjana"), ("HIGH", "Alta"), ("CRITICAL", "Crítica")],
                        db_index=True,
                        default="MEDIUM",
                        max_length=10,
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("NEW", "Nou"),
                            ("INVESTIGATING", "En investigació"),
                            ("RESOLVED", "Resolt"),
                            ("FALSE_POSITIVE", "Fals positiu"),
                        ],
                        db_index=True,
                        default="NEW",
                        max_length=20,
                    ),
                ),
                ("notified", models.BooleanField(default=False, help_text="Si s'ha notificat als responsables")),
                ("notified_at", models.DateTimeField(blank=True, null=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True, db_index=True)),
                ("resolved_at", models.DateTimeField(blank=True, null=True)),
                (
                    "resolved_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="resolved_security_events",
                        to="authentication.apiuser",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="security_events",
                        to="authentication.apiuser",
                    ),
                ),
            ],
            options={
                "verbose_name": "Event de seguretat",
                "verbose_name_plural": "Events de seguretat",
                "db_table": "security_event",
                "ordering": ["-timestamp"],
                "indexes": [
                    models.Index(fields=["event_type", "timestamp"], name="security_ev_event_t_0b896c_idx"),
                    models.Index(fields=["severity", "status"], name="security_ev_severit_a7cdf6_idx"),
                    models.Index(fields=["ip_address", "timestamp"], name="security_ev_ip_addr_db6ebc_idx"),
                    models.Index(fields=["blocked", "timestamp"], name="security_ev_blocked_fccb27_idx"),
                ],
            },
        ),
    ]
