# Generated by Django 5.1.2 on 2025-10-30 16:03

import django.contrib.auth.models
import django.contrib.auth.validators
import django.core.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="APIUser",
            fields=[
                ("password", models.CharField(max_length=128, verbose_name="password")),
                ("last_login", models.DateTimeField(blank=True, null=True, verbose_name="last login")),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={"unique": "A user with that username already exists."},
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[django.contrib.auth.validators.UnicodeUsernameValidator()],
                        verbose_name="username",
                    ),
                ),
                ("first_name", models.CharField(blank=True, max_length=150, verbose_name="first name")),
                ("last_name", models.CharField(blank=True, max_length=150, verbose_name="last name")),
                ("email", models.EmailField(blank=True, max_length=254, verbose_name="email address")),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                ("date_joined", models.DateTimeField(default=django.utils.timezone.now, verbose_name="date joined")),
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                (
                    "organizacion",
                    models.CharField(
                        help_text="Nom de l'organització (ex: Confraria de pescadors, llotja)", max_length=200
                    ),
                ),
                ("cif_organizacion", models.CharField(help_text="CIF de l'organització", max_length=20, unique=True)),
                (
                    "telefono",
                    models.CharField(
                        blank=True,
                        max_length=20,
                        validators=[
                            django.core.validators.RegexValidator(
                                message="Número de telèfon invàlid", regex="^\\+?1?\\d{9,15}$"
                            )
                        ],
                    ),
                ),
                (
                    "is_api_active",
                    models.BooleanField(default=True, help_text="Indica si l'usuari pot accedir a l'API"),
                ),
                (
                    "api_key",
                    models.CharField(
                        blank=True,
                        help_text="API Key per autenticació addicional (opcional)",
                        max_length=64,
                        null=True,
                        unique=True,
                    ),
                ),
                ("max_requests_per_day", models.IntegerField(default=10000, help_text="Màxim de peticions per dia")),
                ("max_requests_per_hour", models.IntegerField(default=1000, help_text="Màxim de peticions per hora")),
                (
                    "allowed_ips",
                    models.JSONField(blank=True, default=list, help_text="Llista d'IPs permeses (buit = totes)"),
                ),
                (
                    "last_login_ip",
                    models.GenericIPAddressField(blank=True, help_text="IP de l'últim login exitós", null=True),
                ),
                (
                    "failed_login_attempts",
                    models.IntegerField(default=0, help_text="Nombre d'intents de login fallits consecutius"),
                ),
                (
                    "account_locked_until",
                    models.DateTimeField(blank=True, help_text="Data fins quan està bloquejat el compte", null=True),
                ),
                ("created_at", models.DateTimeField(auto_now_add=True)),
                ("updated_at", models.DateTimeField(auto_now=True)),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "Usuari API",
                "verbose_name_plural": "Usuaris API",
                "db_table": "api_user",
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="APIAccessLog",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ("endpoint", models.CharField(max_length=500)),
                ("method", models.CharField(max_length=10)),
                ("ip_address", models.GenericIPAddressField()),
                ("user_agent", models.TextField(blank=True)),
                ("request_id", models.CharField(db_index=True, max_length=50)),
                ("status_code", models.IntegerField()),
                ("response_time_ms", models.IntegerField(help_text="Temps de resposta en ms")),
                (
                    "request_body_hash",
                    models.CharField(blank=True, help_text="Hash SHA256 del body (per privacitat)", max_length=64),
                ),
                ("error_message", models.TextField(blank=True)),
                ("timestamp", models.DateTimeField(auto_now_add=True, db_index=True)),
                (
                    "user",
                    models.ForeignKey(
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="access_logs",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name": "Log d'accés API",
                "verbose_name_plural": "Logs d'accés API",
                "db_table": "api_access_log",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="AuthenticationAuditLog",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                (
                    "event_type",
                    models.CharField(
                        choices=[
                            ("LOGIN_SUCCESS", "Successful login"),
                            ("LOGIN_FAILED", "Failed login attempt"),
                            ("LOGIN_BLOCKED", "Login blocked due to account lock"),
                            ("LOGOUT", "User logout"),
                            ("TOKEN_ISSUED", "JWT token issued"),
                            ("TOKEN_REFRESHED", "JWT token refreshed"),
                            ("TOKEN_REVOKED", "JWT token revoked"),
                            ("TOKEN_EXPIRED", "Expired token used"),
                            ("PASSWORD_CHANGED", "Password changed"),
                            ("ACCOUNT_LOCKED", "Account locked"),
                            ("ACCOUNT_UNLOCKED", "Account unlocked"),
                        ],
                        db_index=True,
                        max_length=30,
                        verbose_name="event type",
                    ),
                ),
                ("ip_address", models.GenericIPAddressField(verbose_name="IP address")),
                ("user_agent", models.TextField(blank=True, verbose_name="user agent")),
                ("username_attempted", models.CharField(blank=True, max_length=150, verbose_name="attempted username")),
                ("details", models.JSONField(blank=True, default=dict, verbose_name="event details")),
                (
                    "severity",
                    models.CharField(
                        choices=[
                            ("INFO", "Information"),
                            ("WARNING", "Warning"),
                            ("ERROR", "Error"),
                            ("CRITICAL", "Critical"),
                        ],
                        db_index=True,
                        default="INFO",
                        max_length=10,
                        verbose_name="severity",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True, db_index=True, verbose_name="timestamp")),
                (
                    "user",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="authentication_audit_logs",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "authentication audit log",
                "verbose_name_plural": "authentication audit logs",
                "db_table": "auth_audit_log",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="AuthenticationToken",
            fields=[
                ("id", models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                (
                    "jti",
                    models.CharField(
                        db_index=True,
                        help_text="Unique identifier for the JWT token (jti claim)",
                        max_length=255,
                        unique=True,
                        verbose_name="JWT ID",
                    ),
                ),
                (
                    "token_type",
                    models.CharField(
                        choices=[("access", "Access Token"), ("refresh", "Refresh Token")],
                        default="access",
                        max_length=20,
                        verbose_name="token type",
                    ),
                ),
                ("issued_at", models.DateTimeField(auto_now_add=True, db_index=True, verbose_name="issued at")),
                ("expires_at", models.DateTimeField(db_index=True, verbose_name="expires at")),
                ("is_revoked", models.BooleanField(db_index=True, default=False, verbose_name="revoked")),
                ("revoked_at", models.DateTimeField(blank=True, null=True, verbose_name="revoked at")),
                ("revocation_reason", models.CharField(blank=True, max_length=255, verbose_name="revocation reason")),
                ("ip_address", models.GenericIPAddressField(verbose_name="IP address")),
                ("user_agent", models.TextField(blank=True, verbose_name="user agent")),
                (
                    "revoked_by",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="revoked_tokens",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="revoked by",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="authentication_tokens",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "authentication token",
                "verbose_name_plural": "authentication tokens",
                "db_table": "auth_token",
                "ordering": ["-issued_at"],
            },
        ),
        migrations.AddIndex(
            model_name="apiuser",
            index=models.Index(fields=["cif_organizacion"], name="api_user_cif_org_f8feeb_idx"),
        ),
        migrations.AddIndex(
            model_name="apiuser",
            index=models.Index(fields=["is_api_active", "is_active"], name="api_user_is_api__60a2f7_idx"),
        ),
        migrations.AddIndex(
            model_name="apiaccesslog",
            index=models.Index(fields=["user", "timestamp"], name="api_access__user_id_d9d614_idx"),
        ),
        migrations.AddIndex(
            model_name="apiaccesslog",
            index=models.Index(fields=["ip_address", "timestamp"], name="api_access__ip_addr_bd9b0b_idx"),
        ),
        migrations.AddIndex(
            model_name="apiaccesslog",
            index=models.Index(fields=["status_code", "timestamp"], name="api_access__status__edc88e_idx"),
        ),
        migrations.AddIndex(
            model_name="apiaccesslog",
            index=models.Index(fields=["request_id"], name="api_access__request_df65f8_idx"),
        ),
        migrations.AddIndex(
            model_name="authenticationauditlog",
            index=models.Index(fields=["event_type", "timestamp"], name="auth_audit__event_t_ed572c_idx"),
        ),
        migrations.AddIndex(
            model_name="authenticationauditlog",
            index=models.Index(fields=["user", "timestamp"], name="auth_audit__user_id_2f34c9_idx"),
        ),
        migrations.AddIndex(
            model_name="authenticationauditlog",
            index=models.Index(fields=["severity", "timestamp"], name="auth_audit__severit_cd1635_idx"),
        ),
        migrations.AddIndex(
            model_name="authenticationauditlog",
            index=models.Index(fields=["ip_address", "timestamp"], name="auth_audit__ip_addr_6012dc_idx"),
        ),
        migrations.AddIndex(
            model_name="authenticationtoken",
            index=models.Index(fields=["user", "is_revoked", "expires_at"], name="auth_token_user_id_24eaf6_idx"),
        ),
        migrations.AddIndex(
            model_name="authenticationtoken",
            index=models.Index(fields=["jti", "is_revoked"], name="auth_token_jti_b571f2_idx"),
        ),
    ]
